/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWithIdFieldNotPKArgs } from "./CreateWithIdFieldNotPKArgs";
import { UpdateWithIdFieldNotPKArgs } from "./UpdateWithIdFieldNotPKArgs";
import { DeleteWithIdFieldNotPKArgs } from "./DeleteWithIdFieldNotPKArgs";
import { WithIdFieldNotPKCountArgs } from "./WithIdFieldNotPKCountArgs";
import { WithIdFieldNotPKFindManyArgs } from "./WithIdFieldNotPKFindManyArgs";
import { WithIdFieldNotPKFindUniqueArgs } from "./WithIdFieldNotPKFindUniqueArgs";
import { WithIdFieldNotPK } from "./WithIdFieldNotPK";
import { WithIdFieldNotPKService } from "../withIdFieldNotPk.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WithIdFieldNotPK)
export class WithIdFieldNotPKResolverBase {
  constructor(
    protected readonly service: WithIdFieldNotPKService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "read",
    possession: "any",
  })
  async _withIdFieldNotPksMeta(
    @graphql.Args() args: WithIdFieldNotPKCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WithIdFieldNotPK])
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "read",
    possession: "any",
  })
  async withIdFieldNotPks(
    @graphql.Args() args: WithIdFieldNotPKFindManyArgs
  ): Promise<WithIdFieldNotPK[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WithIdFieldNotPK, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "read",
    possession: "own",
  })
  async withIdFieldNotPk(
    @graphql.Args() args: WithIdFieldNotPKFindUniqueArgs
  ): Promise<WithIdFieldNotPK | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WithIdFieldNotPK)
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "create",
    possession: "any",
  })
  async createWithIdFieldNotPK(
    @graphql.Args() args: CreateWithIdFieldNotPKArgs
  ): Promise<WithIdFieldNotPK> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WithIdFieldNotPK)
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "update",
    possession: "any",
  })
  async updateWithIdFieldNotPK(
    @graphql.Args() args: UpdateWithIdFieldNotPKArgs
  ): Promise<WithIdFieldNotPK | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WithIdFieldNotPK)
  @nestAccessControl.UseRoles({
    resource: "WithIdFieldNotPK",
    action: "delete",
    possession: "any",
  })
  async deleteWithIdFieldNotPK(
    @graphql.Args() args: DeleteWithIdFieldNotPKArgs
  ): Promise<WithIdFieldNotPK | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
