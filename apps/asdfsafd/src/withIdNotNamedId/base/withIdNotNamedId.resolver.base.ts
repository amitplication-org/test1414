/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWithIdNotNamedIdArgs } from "./CreateWithIdNotNamedIdArgs";
import { UpdateWithIdNotNamedIdArgs } from "./UpdateWithIdNotNamedIdArgs";
import { DeleteWithIdNotNamedIdArgs } from "./DeleteWithIdNotNamedIdArgs";
import { WithIdNotNamedIdCountArgs } from "./WithIdNotNamedIdCountArgs";
import { WithIdNotNamedIdFindManyArgs } from "./WithIdNotNamedIdFindManyArgs";
import { WithIdNotNamedIdFindUniqueArgs } from "./WithIdNotNamedIdFindUniqueArgs";
import { WithIdNotNamedId } from "./WithIdNotNamedId";
import { WithIdNotNamedIdService } from "../withIdNotNamedId.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WithIdNotNamedId)
export class WithIdNotNamedIdResolverBase {
  constructor(
    protected readonly service: WithIdNotNamedIdService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "read",
    possession: "any",
  })
  async _withIdNotNamedIdsMeta(
    @graphql.Args() args: WithIdNotNamedIdCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WithIdNotNamedId])
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "read",
    possession: "any",
  })
  async withIdNotNamedIds(
    @graphql.Args() args: WithIdNotNamedIdFindManyArgs
  ): Promise<WithIdNotNamedId[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WithIdNotNamedId, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "read",
    possession: "own",
  })
  async withIdNotNamedId(
    @graphql.Args() args: WithIdNotNamedIdFindUniqueArgs
  ): Promise<WithIdNotNamedId | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WithIdNotNamedId)
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "create",
    possession: "any",
  })
  async createWithIdNotNamedId(
    @graphql.Args() args: CreateWithIdNotNamedIdArgs
  ): Promise<WithIdNotNamedId> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WithIdNotNamedId)
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "update",
    possession: "any",
  })
  async updateWithIdNotNamedId(
    @graphql.Args() args: UpdateWithIdNotNamedIdArgs
  ): Promise<WithIdNotNamedId | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WithIdNotNamedId)
  @nestAccessControl.UseRoles({
    resource: "WithIdNotNamedId",
    action: "delete",
    possession: "any",
  })
  async deleteWithIdNotNamedId(
    @graphql.Args() args: DeleteWithIdNotNamedIdArgs
  ): Promise<WithIdNotNamedId | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
